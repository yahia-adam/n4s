<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>simGetUIEventButton</title>
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>

<body>

<div align="center">
<table class=allEncompassingTable >
 <tr>
  <td >
<p><a href="../../index.html" TARGET="_top"><img src="../images/homeImg.png"></a></p>

<h1><a href="../apiOverview.htm">Regular API</a> function</h1>
<h3 class=subsectionBar><a name="simGetUIEventButton" id="simGetUIEventButton"></a>simGetUIEventButton
<div class=tab>remote API equivalent: <a href="../remoteApiFunctions.htm#simxGetUIEventButton">simxGetUIEventButton</a></div>
<div class=tab>RosPlugin API equivalent: <a href="../rosServices.htm#simRosGetUIEventButton">simRosGetUIEventButton</a></div>
</h3>
<table class=apiTable>
<tr class=apiTableTr> 
<td class=apiTableLeftDescr>
Description 
</td> 
<td class=apiTableRightDescr>Gets the button handle and some auxiliary values of the last occurred event in that OpenGl-based custom UI. The function will then <strong>clear</strong> the event. When an OpenGl-based custom UI button is pressed, a slider is moved or an edit box is changed, an event is registered and stored in the OpenGl-based custom UI. See also the <a href="../apiConstants.htm#simulatorMessages">sim_message_ui_button_state_change</a> message.<br></td>
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCSyn>
C synopsis
</td> 
<td class=apiTableRightCSyn>simInt simGetUIEventButton(simInt uiHandle,simInt* auxiliaryValues)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCParam>C parameters</td> 
<td class=apiTableRightCParam>
<div><strong>uiHandle</strong>: OpenGl-based custom UI handle</div>
<div><strong>auxiliaryValues</strong>: 2 values (can be NULL).</div>
<div class=tab>value1: the <a href="../apiConstants.htm#uiButtonProperties">button property</a></div>
<div class=tab>value2: for sliders: slider state (0-1000), for stay down buttons: down state (0 or 1), for up/down event buttons: up/down events (0 or 1)</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftCRet>
C return value
</td> 
<td class=apiTableRightCRet>
<div>button handle or -1 if no event occurred or if operation was not successful</div>
</td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLSyn>
Lua synopsis
</td> 
<td class=apiTableRightLSyn>number buttonHandle, table_2 auxiliaryValues=simGetUIEventButton(number uiHandle)<br></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLParam>Lua parameters</td> 
<td class=apiTableRightLParam>
<div></div>
<div><strong>uiHandle</strong>: OpenGl-based custom UI handle</div>
<div></div></td> 
</tr> 
<tr class=apiTableTr> 
<td class=apiTableLeftLRet>
Lua return values
</td> 
<td class=apiTableRightLRet>
<div></div>
<div><strong>buttonHandle</strong>: button handle or -1 if no event occurred or if operation was not successful<br>
</div>
<div><strong>auxiliaryValues</strong>: 2 values. Same as for the C-function.  See also the <a href="../apiFunctionListCategory.htm#luaBool">boolean operators in Lua</a>.<br>
</div>
<div></div></td> 
</tr> 
</table> 

<br>
<p><a href="../apiFunctions.htm">All regular API functions on one page</a></p>
<br>
<br>
</td>
</tr>
</table>
</div>
</body>
</html>
